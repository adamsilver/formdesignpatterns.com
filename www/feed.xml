<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Posts - Alex Carpenter</title>
  <subtitle>Sharing what i&#39;ve learned.</subtitle>
  <link href="https://alexcarpenter.me/feed.xml" rel="self"/>
  <link href="https://alexcarpenter.me/"/>
  <updated>2018-05-11T01:00:00+01:00</updated>
  <id>https://alexcarpenter.me/</id>
  <author>
    <name>Alex Carpenter</name>
    <email>im.alexcarpenter@gmail.com</email>
  </author>
  
  <entry>
    <title>Unsetting buttons</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/button-link/"/>
    
    <updated>2018-08-29T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/button-link/</id>
    <content type="html">&lt;p&gt;It’s not uncommon to style the &lt;code&gt;button&lt;/code&gt; and &lt;code&gt;a[href]&lt;/code&gt; elements to look the same throughout your website or application. This often means resetting the default button styling and dealing with browser inconsistencies to make them visually similar.&lt;/p&gt;&lt;p&gt;One method to get you to a sane starting point, is to unset all of the default styling for both elements as shown below.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;button, .button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; unset&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check out the &lt;a href=&quot;https://codepen.io/alexcarpenter/pen/yxaQYr&quot;&gt;CodePen&lt;/a&gt; to see it in action.&lt;/p&gt;&lt;p&gt;Browser support is limited, so be sure to check your requirements before using this method.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Center an element with CSS Grid</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/css-grid-center/"/>
    
    <updated>2018-08-21T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/css-grid-center/</id>
    <content type="html">&lt;p&gt;It’s not uncommon to go a week without a developer complaining on Twitter about how hard it is to center an element using CSS.&lt;/p&gt;&lt;p&gt;Here it is, two lines of CSS to center an element within its parent.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.parent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;place-items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s beautiful.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>5 tips for styling the component layer</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/component-css-tips/"/>
    
    <updated>2018-08-20T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/component-css-tips/</id>
    <content type="html">&lt;p&gt;When working within the component layer of your project here are five tips that I have found to be helpful–independent of what methodology or tooling you may be using.&lt;/p&gt;&lt;h2 id=&quot;1.-build-components-in-isolation&quot;&gt;1. Build components in isolation&lt;/h2&gt;&lt;p&gt;Setup a test page that only includes the component that you are building. This helps remove any ideas of styling your component based on its location.&lt;/p&gt;&lt;h2 id=&quot;2.-components-should-fill-the-available-space-they-live-within&quot;&gt;2. Components should fill the available space they live within&lt;/h2&gt;&lt;p&gt;By default components should fill the available space it lives within. Use &lt;code&gt;max-width&lt;/code&gt; delarations where applicable. Refrain from using percentage &lt;code&gt;max-width&lt;/code&gt; declarations and stick to px dimensions if necessary.&lt;/p&gt;&lt;p&gt;For example, if you declare your component to have a max-width of 25%, it makes it quite difficult to use that component within a smaller sidebar area.&lt;/p&gt;&lt;h2 id=&quot;3.-remove-spatial-styling-from-components&quot;&gt;3. Remove spatial styling from components&lt;/h2&gt;&lt;p&gt;As hinted above, make use of the &lt;a href=&quot;https://smoothie-css.com/#2-global&quot;&gt;object layer&lt;/a&gt; to help control spacing, width, and height styling.&lt;/p&gt;&lt;h2 id=&quot;4.-contain-component-styles-to-a-single-file&quot;&gt;4. Contain component styles to a single file&lt;/h2&gt;&lt;p&gt;Refrain from adding modifier classes to components outside of &lt;em&gt;its&lt;/em&gt; CSS file. This will help when debugging component specific issues. Make use of &lt;a href=&quot;http://thesassway.com/intermediate/referencing-parent-selectors-using-ampersand&quot;&gt;parent selectors&lt;/a&gt; to add modifiers when needed.&lt;/p&gt;&lt;h2 id=&quot;5.-prefix-component-classes&quot;&gt;5. Prefix component classes&lt;/h2&gt;&lt;p&gt;Lastly, prefix components with &lt;code&gt;.c-[component-name]&lt;/code&gt; for extra clarity.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Better CSS outlines with box-shadows</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/better-css-outlines/"/>
    
    <updated>2018-08-13T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/better-css-outlines/</id>
    <content type="html">&lt;p&gt;I think we can all agree that the default browser outline styling isn’t the most beautiful design implementation. I also think we can agree that it may not be pretty but it does &lt;em&gt;function well&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;It can be common to see folks remove the outline completely and not replace it with any other visual indication. This is bad practice and can hurt the user experience for keyboard users.&lt;/p&gt;&lt;p&gt;To appease our designers while keeping our site accessible, lets replace the default outline style and replace it with a box-shadow implemenatation shown below.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;input:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 0 3px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0, 123, 255, .5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we can see we set the outline to 0 when the input is focused and added a box-shadow declaration to replace its functionality. As an added bonus, using a box-shadow also follows border-radius declarations. So if our input has a 4px border radius, our faux outline will not have a gap in the corners.&lt;/p&gt;&lt;p&gt;Check out the &lt;a href=&quot;https://codepen.io/alexcarpenter/pen/vaPwaa&quot;&gt;CodePen&lt;/a&gt; example to see it in action.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Background image gradient overlay</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/background-image-gradient-overlay/"/>
    
    <updated>2018-08-08T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/background-image-gradient-overlay/</id>
    <content type="html">&lt;p&gt;Five years ago I made a &lt;a href=&quot;https://codepen.io/alexcarpenter/pen/LveDx/&quot;&gt;CodePen&lt;/a&gt; to demonstrate how to apply a gradient overlay over a background image. Since then that pen has been viewed over 294,804 times and hearted 705 times.&lt;/p&gt;&lt;p&gt;Since it still gets referenced daily, I thought I would give it a proper write up.&lt;/p&gt;&lt;p&gt;First lets create our banner element which we will apply our background image and gradient overlay to. We will also add an additional content wrapper for elements that live within our banner, which will reference later.&lt;/p&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;banner&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;banner__content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Banner Heading&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Banner description&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next lets apply our background image to our banner element and set a min-height of 400px.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.banner&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;min-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 400px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url(&#39;http://unsplash.it/1200x800&#39;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cover&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To apply our gradient overlay, will make use of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements&quot;&gt;pseudo-element&lt;/a&gt;. We absolutely position the overlay to cover 100% width and height of our banner.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.banner:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;linear-gradient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;to bottom right, red, blue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lastly, lets revisit the banner content wrapper. Since we are applying the gradient overlay with a pseudo-element, you will sometimes run into issues with content inside of the banner displaying underneath the gradient overlay. To fix this we wrap all of our content inside of our banner with a wrapper and set that to recieve a &lt;code&gt;z-index&lt;/code&gt; higher than the overlay as seen below.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.banner__content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As noted in the first comment, you could omit the pseudo-element and make use of multiple backgrounds. This works great as well, but removes the ability to animate the gradient on hover which can be a common use case.&lt;/p&gt;&lt;p&gt;View the original &lt;a href=&quot;https://codepen.io/alexcarpenter/pen/LveDx/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Component event delegation</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/component-event-delegation/"/>
    
    <updated>2018-08-06T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/component-event-delegation/</id>
    <content type="html">&lt;p&gt;Last week I wrote about &lt;a href=&quot;https://alexcarpenter.me/posts/2018/08/check-for-element/&quot;&gt;checking for an element on a page&lt;/a&gt; before executing our Javascript to avoid errors. That example works well if you only have one element to attach an event listener to. If you have multiple components and triggers, we should look into using event delegation to keep our code performant.&lt;/p&gt;&lt;p&gt;So lets refactor our modal component code from last week to make use of event delegation.&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; trigger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[data-modal-trigger]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  trigger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Modal functionality code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First lets pass the &lt;code&gt;event&lt;/code&gt; through to our modal function. Then we can use the &lt;code&gt;closest()&lt;/code&gt; method to see if our modal trigger was clicked.&lt;/p&gt;&lt;p&gt;Now that we have refactored our modal function. We can attach an event listener to the document. Now any time a click happens within the document, we run our modal code and pass through the click event.&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[data-modal-trigger]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Modal functionality code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows us to add multiple components to our site and only have a single event listener as shown below.&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[data-modal-trigger]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Modal functionality code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;accordion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[data-accordion-trigger]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Accordion functionality code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;accordion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that this assumes that your components are all run off of a click event, which might not always be the case. You might also have components which need to watch for &lt;code&gt;mouseover&lt;/code&gt; or &lt;code&gt;mouseout&lt;/code&gt; events, which would require seperate event listeners.&lt;/p&gt;&lt;p&gt;Check out the &lt;a href=&quot;https://codepen.io/alexcarpenter/pen/pZKeKV&quot;&gt;CodePen&lt;/a&gt; to see the code in action.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Check for an element on a page before running Javascript code</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/check-for-element/"/>
    
    <updated>2018-08-03T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/check-for-element/</id>
    <content type="html">&lt;p&gt;It can be common to run a piece of Javascript code based on the availability of an element on the page like a button. If the button is present we want to run a method, otherwise we want it to return (stop from executing).&lt;/p&gt;&lt;p&gt;Lets use our modal component as an example. We’ve consolidated our modal functionality into a function. We query select our modal trigger button and then add an eventlistener that watches for clicks on our button. When that button is clicked we want to run our modal show or hide methods as needed.&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; trigger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[data-modal-trigger]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  trigger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Modal functionality code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code above &lt;em&gt;assumes&lt;/em&gt; the trigger element will always be available. In our case that won’t always be true. We only want our modal to be present on the about page. So when our users visit the homepage or contact page, the above code will throw an error (&lt;code&gt;Uncaught TypeError: Cannot read property &#39;addEventListener&#39; of null&lt;/code&gt;) because the trigger element is not available on the page.&lt;/p&gt;&lt;p&gt;To fix this, we need to first check for the trigger on the page and do some logic based on its availibility. Since we are using &lt;code&gt;querySelector&lt;/code&gt; which references a single element, we can check for that element using &lt;code&gt;if (trigger)&lt;/code&gt;. This will be &lt;code&gt;true&lt;/code&gt; if the element is available, and &lt;code&gt;false&lt;/code&gt; if not available. With that in mind we can add this logic before our event listener is added as seen highlighted below. You can see we also added an exclamation mark before our trigger variable. This means &lt;strong&gt;if not&lt;/strong&gt;. So &lt;strong&gt;if&lt;/strong&gt; the trigger &lt;strong&gt;is not&lt;/strong&gt; available &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; trigger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[data-modal-trigger]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Return early if our trigger is not available&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;trigger&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  trigger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Modal functionality code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now our modal functionality code will only execute if our trigger is available and will not throw and error otherwise.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Event delegation gotcha follow-up</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/event-delegation-gotcha-follow-up/"/>
    
    <updated>2018-08-02T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/event-delegation-gotcha-follow-up/</id>
    <content type="html">&lt;p&gt;Yesterday I wrote about an &lt;a href=&quot;https://alexcarpenter.me/posts/2018/08/event-delegation-gotcha/&quot;&gt;event delegation gotcha&lt;/a&gt; that I ran into while building a few small JS libraries. I ran the post by &lt;a href=&quot;https://gomakethings.com/&quot;&gt;Chris Ferdinandi&lt;/a&gt; and he pointed out I could make use of a different method called &lt;code&gt;closest()&lt;/code&gt; instead of &lt;code&gt;matches()&lt;/code&gt; as seen below.&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  event &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// If event doesn&#39;t match our toggle selector return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line highlight-line-add&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.accordion-toggle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line highlight-line-remove&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.accordion-toggle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Run toggle code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;togglePanel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Depending on the browsers you are looking to support, &lt;code&gt;matches()&lt;/code&gt; offers a little better support than &lt;code&gt;closest()&lt;/code&gt;. So using the one line css trick might be an option for you if you are counting bytes.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Event delegation gotcha</title>
    
      <link href="https://alexcarpenter.me/posts/2018/08/event-delegation-gotcha/"/>
    
    <updated>2018-08-01T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/08/event-delegation-gotcha/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; Since posting this, Chris shared with me the &lt;code&gt;closest()&lt;/code&gt; method which works without having to remove pointer events from nested elements. Read about the difference &lt;a href=&quot;https://alexcarpenter.me/posts/2018/08/event-delegation-gotcha-follow-up/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;While making an effort to learn Javascript over the past year I made a couple of small JS libraries. When possible I have always resorted to using event delegation to keep things performant.&lt;/p&gt;&lt;p&gt;While making a small accordion library, I found it common to include an svg icon within the accordion toggle to designate its open and closed state. As an example, you can see I marked up the accordion toggle using a &lt;code&gt;button&lt;/code&gt; element and inside of the button I included an plus icon svg as well.&lt;/p&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;accordion-toggle&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  Toggle&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 10 10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, I setup my event listener on the document, and watched for events. If the &lt;code&gt;event.target&lt;/code&gt; doesn’t match the CSS selector on my button I would return, otherwise I would run the &lt;code&gt;togglePanel()&lt;/code&gt; function.&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  event &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// If event doesn&#39;t match our toggle selector return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.accordion-toggle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Run toggle code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;togglePanel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works great, except when a users clicks on the svg inside the button. Since we are checking for a CSS selector match using the &lt;code&gt;matches&lt;/code&gt; method, the &lt;code&gt;event.target&lt;/code&gt; would be the svg and not our button. To fix this we need to make sure when the svg is clicked, that it does not register an event. To do that we can add &lt;code&gt;pointer-events: none;&lt;/code&gt; to the svg within the button as shown below.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;button svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;pointer-events&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now our event delegation code will work as expected. Check out this &lt;a href=&quot;https://codepen.io/alexcarpenter/pen/mjxXwj&quot;&gt;CodePen&lt;/a&gt; to see it in action. Comment out the CSS to see how the code fails when clicking the svg.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>eleventy-boilerplate</title>
    
      <link href="https://alexcarpenter.me/posts/2018/07/eleventy-boilerplate/"/>
    
    <updated>2018-07-27T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/07/eleventy-boilerplate/</id>
    <content type="html">&lt;p&gt;If you are subscribed to my &lt;a href=&quot;https://alexcarpenter.me/newsletter/&quot;&gt;newsletter&lt;/a&gt; or follow me on &lt;a href=&quot;https://twitter.com/hybrid_alex&quot;&gt;Twitter&lt;/a&gt;, you probably have noticed my excitement for the new static site generator &lt;a href=&quot;https://www.11ty.io/&quot;&gt;Eleventy&lt;/a&gt;. This very site you are reading is built with Eleventy, and my recent side project &lt;a href=&quot;https://frontend-foundations.com/&quot;&gt;Front-end Foundations&lt;/a&gt; is built with it as well.&lt;/p&gt;&lt;p&gt;After a few times recreating my ideal folder structure and configuration, I figured it was time to create a boilerplate to get up and running quickly for future projects. So I created my slightly opinionated Eleventy boilerplate.&lt;/p&gt;&lt;p&gt;It is purposely simple, using &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;Nunjchuks&lt;/a&gt; as a templating language, and following some of the &lt;a href=&quot;https://www.11ty.io/docs/quicktips/&quot;&gt;quick tips&lt;/a&gt; to inline minified &lt;a href=&quot;https://www.11ty.io/docs/quicktips/inline-css/&quot;&gt;CSS&lt;/a&gt; and &lt;a href=&quot;https://www.11ty.io/docs/quicktips/inline-js/&quot;&gt;JavaScript&lt;/a&gt;. I have found this to be a quite enjoyable setup for personal projects and getting a prototype up and running quickly to share with a team when paired with &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Feel free to check the project out on &lt;a href=&quot;https://github.com/alexcarpenter/eleventy-boilerplate&quot;&gt;Github&lt;/a&gt; and let me know what you think!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Office Hours</title>
    
      <link href="https://alexcarpenter.me/posts/2018/06/office-hours/"/>
    
    <updated>2018-06-16T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/06/office-hours/</id>
    <content type="html">&lt;p&gt;In my continual quest to give back to the community that has provided so much for me, I decided to signup up for a service called Office Hours.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://officehours.io/&quot;&gt;Office Hours&lt;/a&gt; provides a seamless way for me to schedule time with folks who are looking to gather advice about getting started as a front-end developer.&lt;/p&gt;&lt;h2 id=&quot;here-are-some-things-i-can-help-you-with&quot;&gt;Here are some things I can help you with&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;How to build your first personal website&lt;/li&gt;&lt;li&gt;How to get started as a front-end developer&lt;/li&gt;&lt;li&gt;General advice for entry level developers&lt;/li&gt;&lt;li&gt;Marketing yourself as a front-end developer&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;scheduling&quot;&gt;Scheduling&lt;/h2&gt;&lt;p&gt;To start I am offering a free 10 minute 1-on-1 session every &lt;del datetime=&quot;2018-06-18 15:08:57&quot;&gt;Monday&lt;/del&gt; &lt;ins datetime=&quot;2018-06-18 15:08:57&quot;&gt;Tuesday&lt;/ins&gt; morning at 8:00am EDT. If you are interested in signing up for a session, checkout my availability at &lt;a href=&quot;https://officehours.io/people/alexcarpenter&quot;&gt;officehours.io/people/alexcarpenter&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Three tips for writing better CSS</title>
    
      <link href="https://alexcarpenter.me/posts/2018/05/css-tips/"/>
    
    <updated>2018-05-16T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/05/css-tips/</id>
    <content type="html">&lt;p&gt;I seem to be apart of the few lately, but I still love CSS.&lt;/p&gt;&lt;p&gt;It’s not without its challenges, but nothing I don’t experience when working with &lt;abbr title=&quot;Hypertext Markup Language&quot;&gt;HTML&lt;/abbr&gt; or JavaScript in my opinion.&lt;/p&gt;&lt;p&gt;Here are a few quick tips I have been thinking about lately with regards to writing better &lt;abbr title=&quot;Cascading Stylesheets&quot;&gt;CSS&lt;/abbr&gt;.&lt;/p&gt;&lt;h2 id=&quot;1.-reduce-far-reaching-styles&quot;&gt;1. Reduce far reaching styles&lt;/h2&gt;&lt;p&gt;Be careful styling raw &lt;abbr title=&quot;Hypertext Markup Language&quot;&gt;HTML&lt;/abbr&gt; elements globally. Make careful use of the cascade. Globals are powerful and need to be throughly considered before being introduced.&lt;/p&gt;&lt;p&gt;For example, I get a little nervous when I see headings getting overly specific styling outside of a default &lt;code&gt;font-weight&lt;/code&gt; and &lt;code&gt;font-size&lt;/code&gt;. When you start to introduce colors, text transformations, I often see them having to be overridden farther down the document.&lt;/p&gt;&lt;p&gt;Try to reduce that amount of times you have to undo something you had previously declared farther up the cascade.&lt;/p&gt;&lt;h2 id=&quot;2.-whitespace&quot;&gt;2. Whitespace&lt;/h2&gt;&lt;p&gt;If you are using a build system to minify your &lt;abbr title=&quot;Cascading Stylesheets&quot;&gt;CSS&lt;/abbr&gt;, whitespace is a free documentation tool. This is a small but handy tip I picked up from Harry Roberts, he does a great job explaining how &lt;a href=&quot;https://csswizardry.com/2017/05/writing-tidy-code/&quot;&gt;whitespace can be semantic&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;3.-periodically-check-the-output&quot;&gt;3. Periodically check the output&lt;/h2&gt;&lt;p&gt;This may seem silly to some, “I know what the output will look like, I wrote it!”, but Sass and tools alike do a great job of masking what you might expect in the output.&lt;/p&gt;&lt;p&gt;Periodically checking the output has often resulted in me refactoring a bit of my &lt;abbr title=&quot;Cascading Stylesheets&quot;&gt;CSS&lt;/abbr&gt; for the better of the project.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Back to static</title>
    
      <link href="https://alexcarpenter.me/posts/2018/05/back-to-static/"/>
    
    <updated>2018-05-11T01:00:00+01:00</updated>
    <id>https://alexcarpenter.me/posts/2018/05/back-to-static/</id>
    <content type="html">&lt;p&gt;Towards the beginning of the year I had migrated my personal site setup from Jekyll over to Craft CMS.&lt;/p&gt;&lt;p&gt;Around that time I was interested in improving my Craft CMS development skills, so it made sense to use my website as a playground to learn.&lt;/p&gt;&lt;p&gt;Since then, I have learned a lot and made a few &lt;a href=&quot;https://www.youtube.com/watch?v=VSXglzqJ2Z4&amp;amp;list=PLmv4wIIvTDgGX6bpR3cdVddTDTR8DbDmO&quot;&gt;screencasts&lt;/a&gt; along the way. That time spent learning and experimenting has had a big influence on how I approach new Craft CMS builds these days, success!&lt;/p&gt;&lt;p&gt;Lately I have been feeling the itch to get back to something simpler and lighter. I had seen Zach Leatherman had released &lt;a href=&quot;https://github.com/11ty/eleventy&quot;&gt;Eleventy&lt;/a&gt; recently, which is an alternative to Jekyll built on Javascript.&lt;/p&gt;&lt;p&gt;After roughly a week of setup, design/development and content migration, I have a new site setup. I really like the flexibity &lt;abbr title=&quot;Eleventy&quot;&gt;11ty&lt;/abbr&gt; offers in comparision to my previous Jekyll build. &lt;abbr title=&quot;Eleventy&quot;&gt;11ty&lt;/abbr&gt; manages my content and templates and I bring my own styling and scripting layers.&lt;/p&gt;&lt;p&gt;Feel free to take a peak at the &lt;a href=&quot;https://github.com/alexcarpenter/alexcarpenter.github.io&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
</feed>
